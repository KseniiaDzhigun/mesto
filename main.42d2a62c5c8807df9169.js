(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._address=e.baseUrl,this._headers=e.headers}var n,r;return n=t,(r=[{key:"_handleResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getInitialUserInfo",value:function(){return fetch("".concat(this._address,"/users/me"),{method:"GET",headers:this._headers}).then(this._handleResponse)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._address,"/cards"),{method:"GET",headers:this._headers}).then(this._handleResponse)}},{key:"getInitialData",value:function(){return Promise.all([this.getInitialUserInfo(),this.getInitialCards()])}},{key:"editUserInfo",value:function(e){return fetch("".concat(this._address,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"addNewCard",value:function(e){return fetch("".concat(this._address,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._address,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}},{key:"likeCard",value:function(e){return fetch("".concat(this._address,"/cards/").concat(e,"/likes"),{method:"PUT",headers:this._headers}).then(this._handleResponse)}},{key:"removeLike",value:function(e){return fetch("".concat(this._address,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}},{key:"changeAvatar",value:function(e){return fetch("".concat(this._address,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){var n=t.data,r=t.config,o=t.handleImageClick,i=t.handleLikeClick,a=t.handleDeleteClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._title=n.name,this._alt=n.name,this._image=n.link,this._likes=n.likes,this._id=n._id,this._userId=n.currentUser._id,this._ownerId=n.owner._id,this._config=r,this._handleImageClick=o,this._handleLikeClick=i,this._handleDeleteClick=a}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._config.cardTemplateSelector).content.querySelector(this._config.cardSelector).cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(this._config.imageSelector),this._likeButton=this._element.querySelector(this._config.likeButtonSelector),this._likeCounter=this._element.querySelector(this._config.likeCounterSelector),this._trashButton=this._element.querySelector(this._config.trashButtonSelector),this._removeTrashButton(),this._changeLikeButtonState(),this._setEventListeners(),this._likeCounter.textContent=this._likes.length,this._element.querySelector(this._config.titleSelector).textContent=this._title,this._cardImage.src=this._image,this._cardImage.alt=this._alt,this._element}},{key:"_removeTrashButton",value:function(){this._ownerId!==this._userId&&this._trashButton.remove()}},{key:"isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"updateLikesCounter",value:function(e){this._likes=e.likes,this._likeCounter.textContent=this._likes.length,this._changeLikeButtonState()}},{key:"_changeLikeButtonState",value:function(){this.isLiked()?this._likeButton.classList.add(this._config.activeLikeButtonClass):this._likeButton.classList.remove(this._config.activeLikeButtonClass)}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){e._handleLikeClick(e._id)})),this._trashButton.addEventListener("click",(function(){e._handleDeleteClick(e._id,e._element)})),this._cardImage.addEventListener("click",this._handleImageClick)}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=t,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e,t){t?this._container.prepend(e):this._container.append(e)}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._config=t,this._formElement=n}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.add(this._config.inputErrorClass),this._errorElement.textContent=t,this._errorElement.classList.add(this._config.errorClass)}},{key:"_hideInputError",value:function(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),e.classList.remove(this._config.inputErrorClass),this._errorElement.classList.remove(this._config.errorClass),this._errorElement.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_haveInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"disableButton",value:function(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}},{key:"enableButton",value:function(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.removeAttribute("disabled")}},{key:"_toggleButtonState",value:function(){this._haveInvalidInput()?this.disableButton():this.enableButton()}},{key:"_setEventListeners",value:function(){var e=this;this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"resetFormValidator",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._config=n,this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popupElement.classList.add(this._config.popupOpenedClass)}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove(this._config.popupOpenedClass)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("mousedown",(function(t){(t.target===t.currentTarget||t.target.classList.contains(e._config.closeButtonClass))&&e.close()}))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=h(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(this,arguments)}function h(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}function _(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return _(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e,t))._popupImage=document.querySelector(n._config.popupImageSelector),n._popupCaption=document.querySelector(n._config.popupCaptionSelector),n.setEventListeners(),n}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;this._popupImage.src=n,this._popupImage.alt=t,this._popupCaption.textContent=t,p(y(a.prototype),"open",this).call(this)}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function S(e,t){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},S(e,t)}function E(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e,t,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e,t))._formElement=r._popupElement.querySelector(r._config.popupFormSelector),r._handleFormSubmit=n,r._inputlist=r._formElement.querySelectorAll(r._config.inputSelector),r._submitButton=r._formElement.querySelector(r._config.submitButtonSelector),r._submitButtonText=r._submitButton.textContent,r.setEventListeners(),r}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;g(w(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues())}))}},{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputlist.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setInputValues",value:function(e){this._inputlist.forEach((function(t){t.value=e[t.name]}))}},{key:"close",value:function(){g(w(a.prototype),"close",this).call(this),this._formElement.reset()}},{key:"setSavingMode",value:function(e){this._submitButton.textContent=e?"Сохранение...":this._submitButtonText}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(){return j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=I(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},j.apply(this,arguments)}function I(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=R(e)););return e}function P(e,t){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},P(e,t)}function B(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function R(e){return R=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},R(e)}var A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=R(r);if(o){var n=R(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return B(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e,t))._formElement=n._popupElement.querySelector(n._config.popupFormSelector),n.setEventListeners(),n}return t=a,(n=[{key:"setSubmitAction",value:function(e){this._handleSubmitCallback=e}},{key:"setEventListeners",value:function(){var e=this;this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmitCallback()})),j(R(a.prototype),"setEventListeners",this).call(this)}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._config=t,this._userName=document.querySelector(this._config.userNameSelector),this._userAbout=document.querySelector(this._config.userAboutSelector),this._userAvatar=document.querySelector(this._config.userAvatarSelector),this._handleAvatarClick=n}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e={};return e.name=this._userName.textContent,e.about=this._userAbout.textContent,e}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userAbout.textContent=e.about}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e.avatar,this._setEventListeners()}},{key:"_setEventListeners",value:function(){this._userAvatar.addEventListener("click",this._handleAvatarClick)}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),x={formSelector:".popup__form",fieldsetSelector:".popup__form-set",inputSelector:".popup__input",submitButtonSelector:".popup__button-submit",inactiveButtonClass:"popup__button-submit_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},U={cardTemplateSelector:".item_template",cardSelector:".cards__element",imageSelector:".cards__image",likeButtonSelector:".cards__like-button",likeCounterSelector:".cards__like-counter",titleSelector:".cards__title",trashButtonSelector:".cards__trash-button",activeLikeButtonClass:"cards__like-button_active"},D={closeButtonClass:"popup__close-button",popupOpenedClass:"popup_opened",popupImageSelector:".popup__image",popupCaptionSelector:".popup__caption",inputSelector:".popup__input",popupFormSelector:".popup__form",submitButtonSelector:".popup__button-submit"},V={userNameSelector:".profile__title",userAboutSelector:".profile__subtitle",userAvatarSelector:".profile__avatar"},N=document.querySelector(".profile__button_type_edit"),M=document.querySelector(".profile__button_type_add");function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var J,G={},H=new t({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-50",headers:{authorization:"a5a02e60-10c8-46a9-914b-480856b1458a","Content-Type":"application/json"}});H.getInitialData().then((function(e){var t,n,o=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],c=o[1];function u(e){e.currentUser=a;var t=new r({data:e,config:U,handleImageClick:function(){f.open(e)},handleLikeClick:function(e){t.isLiked()?H.removeLike(e).then((function(e){t.updateLikesCounter(e)})).catch((function(e){console.log("Ошибка: ".concat(e))})):H.likeCard(e).then((function(e){t.updateLikesCounter(e)})).catch((function(e){console.log("Ошибка: ".concat(e))}))},handleDeleteClick:function(e,t){l.open(),l.setSubmitAction((function(){H.deleteCard(e).then((function(){t.remove(),l.close()})).catch((function(e){console.log("Ошибка: ".concat(e))}))}))}});return t.generateCard()}var s=new i((function(e){s.addItem(u(e),!1)}),".cards__elements"),l=new A(".popup_type_submit",D),f=new m(".popup_type_image",D),p=new C(".popup_type_avatar",D,(function(e){var t=e.avatar;p.setSavingMode(!0),H.changeAvatar({avatar:t}).then((function(e){h.setUserAvatar(e)})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){p.setSavingMode(!1)})),p.close()})),h=new q(V,(function(){p.open()}));h.setUserInfo(a),h.setUserAvatar(a),s.renderItems(c);var d=new C(".popup_type_add",D,(function(e){d.setSavingMode(!0),H.addNewCard(e).then((function(e){s.addItem(u(e),!0)})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){d.setSavingMode(!1)})),d.close()})),_=new C(".popup_type_edit",D,(function(e){var t=e.name,n=e.about;_.setSavingMode(!0),H.editUserInfo({name:t,about:n}).then((function(e){h.setUserInfo(e)})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){_.setSavingMode(!1)})),_.close()}));N.addEventListener("click",(function(){var e;G["profile-form"].resetFormValidator(),e=h.getUserInfo(),_.setInputValues(e),_.open(),G["profile-form"].enableButton()})),M.addEventListener("click",(function(){G["card-form"].resetFormValidator(),G["card-form"].disableButton(),d.open()}))})).catch((function(e){console.log("Ошибка: ".concat(e))})),J=x,Array.from(document.querySelectorAll(J.formSelector)).forEach((function(e){var t=new c(x,e),n=e.getAttribute("name");G[n]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,